// Grafana Alloy Configuration for MarketSage Monitoring
// Simplified configuration for reliable operation

// ============================================================================
// METRICS COLLECTION
// ============================================================================

// Scrape metrics from MarketSage application
prometheus.scrape "marketsage_app" {
	targets = [{
		__address__ = env("MARKETSAGE_APP_URL"),
		job         = "marketsage-app",
	}]
	scrape_interval = "15s"
	metrics_path    = "/metrics"
	forward_to      = [prometheus.remote_write.grafana_cloud.receiver, prometheus.remote_write.local_prometheus.receiver]
}

// Scrape PostgreSQL Exporter metrics
prometheus.scrape "postgres" {
	targets = [{
		__address__ = "postgres-exporter:9187",
		job         = "postgres",
	}]
	scrape_interval = "30s"
	forward_to      = [prometheus.remote_write.grafana_cloud.receiver, prometheus.remote_write.local_prometheus.receiver]
}

// Scrape Redis Exporter metrics
prometheus.scrape "redis" {
	targets = [{
		__address__ = "redis-exporter:9121",
		job         = "redis",
	}]
	scrape_interval = "30s"
	forward_to      = [prometheus.remote_write.grafana_cloud.receiver, prometheus.remote_write.local_prometheus.receiver]
}

// Scrape cAdvisor metrics
prometheus.scrape "cadvisor" {
	targets = [{
		__address__ = "cadvisor:8080",
		job         = "cadvisor",
	}]
	scrape_interval = "30s"
	metrics_path    = "/metrics"
	forward_to      = [prometheus.remote_write.grafana_cloud.receiver, prometheus.remote_write.local_prometheus.receiver]
}

// Scrape Node Exporter metrics
prometheus.scrape "node" {
	targets = [{
		__address__ = "node-exporter:9100",
		job         = "node",
	}]
	scrape_interval = "30s"
	forward_to      = [prometheus.remote_write.grafana_cloud.receiver, prometheus.remote_write.local_prometheus.receiver]
}

// Send metrics to Grafana Cloud
prometheus.remote_write "grafana_cloud" {
	endpoint {
		url = env("GRAFANA_CLOUD_PROMETHEUS_URL")

		basic_auth {
			username      = env("GRAFANA_CLOUD_PROMETHEUS_USER")
			password_file = env("GRAFANA_CLOUD_API_KEY_FILE")
		}
	}
}

// Send metrics to local Prometheus for backup
prometheus.remote_write "local_prometheus" {
	endpoint {
		url = "http://prometheus:9090/api/v1/write"

		basic_auth {
			username      = "admin"
			password_file = "/run/secrets/prometheus_basic_auth"
		}
	}
}

// ============================================================================
// DOCKER CONTAINER LOG COLLECTION
// ============================================================================

// Collect Docker container logs and forward to both destinations
loki.source.docker "docker_logs" {
	host       = "unix:///var/run/docker.sock"
	targets    = [{
		__address__ = "localhost",
		job         = "docker",
	}]
	forward_to = [loki.write.grafana_cloud.receiver, loki.write.local_loki.receiver]
}

// Send logs to Grafana Cloud Loki
loki.write "grafana_cloud" {
	endpoint {
		url = env("GRAFANA_CLOUD_LOKI_URL")

		basic_auth {
			username      = env("GRAFANA_CLOUD_LOKI_USER")
			password_file = env("GRAFANA_CLOUD_API_KEY_FILE")
		}
	}
}

// Send logs to local Loki for backup
loki.write "local_loki" {
	endpoint {
		url = "http://loki:3100/loki/api/v1/push"
	}
}